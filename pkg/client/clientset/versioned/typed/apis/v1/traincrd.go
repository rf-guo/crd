/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "finupgroup.com/decision/traincrd/pkg/apis/v1"
	scheme "finupgroup.com/decision/traincrd/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TraincrdsGetter has a method to return a TraincrdInterface.
// A group's client should implement this interface.
type TraincrdsGetter interface {
	Traincrds(namespace string) TraincrdInterface
}

// TraincrdInterface has methods to work with Traincrd resources.
type TraincrdInterface interface {
	Create(*v1.Traincrd) (*v1.Traincrd, error)
	Update(*v1.Traincrd) (*v1.Traincrd, error)
	UpdateStatus(*v1.Traincrd) (*v1.Traincrd, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Traincrd, error)
	List(opts metav1.ListOptions) (*v1.TraincrdList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Traincrd, err error)
	TraincrdExpansion
}

// traincrds implements TraincrdInterface
type traincrds struct {
	client rest.Interface
	ns     string
}

// newTraincrds returns a Traincrds
func newTraincrds(c *DecisionV1Client, namespace string) *traincrds {
	return &traincrds{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the traincrd, and returns the corresponding traincrd object, and an error if there is any.
func (c *traincrds) Get(name string, options metav1.GetOptions) (result *v1.Traincrd, err error) {
	result = &v1.Traincrd{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("traincrds").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Traincrds that match those selectors.
func (c *traincrds) List(opts metav1.ListOptions) (result *v1.TraincrdList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.TraincrdList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("traincrds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested traincrds.
func (c *traincrds) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("traincrds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a traincrd and creates it.  Returns the server's representation of the traincrd, and an error, if there is any.
func (c *traincrds) Create(traincrd *v1.Traincrd) (result *v1.Traincrd, err error) {
	result = &v1.Traincrd{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("traincrds").
		Body(traincrd).
		Do().
		Into(result)
	return
}

// Update takes the representation of a traincrd and updates it. Returns the server's representation of the traincrd, and an error, if there is any.
func (c *traincrds) Update(traincrd *v1.Traincrd) (result *v1.Traincrd, err error) {
	result = &v1.Traincrd{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("traincrds").
		Name(traincrd.Name).
		Body(traincrd).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *traincrds) UpdateStatus(traincrd *v1.Traincrd) (result *v1.Traincrd, err error) {
	result = &v1.Traincrd{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("traincrds").
		Name(traincrd.Name).
		SubResource("status").
		Body(traincrd).
		Do().
		Into(result)
	return
}

// Delete takes name of the traincrd and deletes it. Returns an error if one occurs.
func (c *traincrds) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("traincrds").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *traincrds) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("traincrds").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched traincrd.
func (c *traincrds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Traincrd, err error) {
	result = &v1.Traincrd{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("traincrds").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
