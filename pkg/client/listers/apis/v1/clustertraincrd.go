/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "finupgroup.com/decision/traincrd/pkg/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterTraincrdLister helps list ClusterTraincrds.
type ClusterTraincrdLister interface {
	// List lists all ClusterTraincrds in the indexer.
	List(selector labels.Selector) (ret []*v1.ClusterTraincrd, err error)
	// Get retrieves the ClusterTraincrd from the index for a given name.
	Get(name string) (*v1.ClusterTraincrd, error)
	ClusterTraincrdListerExpansion
}

// clusterTraincrdLister implements the ClusterTraincrdLister interface.
type clusterTraincrdLister struct {
	indexer cache.Indexer
}

// NewClusterTraincrdLister returns a new ClusterTraincrdLister.
func NewClusterTraincrdLister(indexer cache.Indexer) ClusterTraincrdLister {
	return &clusterTraincrdLister{indexer: indexer}
}

// List lists all ClusterTraincrds in the indexer.
func (s *clusterTraincrdLister) List(selector labels.Selector) (ret []*v1.ClusterTraincrd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterTraincrd))
	})
	return ret, err
}

// Get retrieves the ClusterTraincrd from the index for a given name.
func (s *clusterTraincrdLister) Get(name string) (*v1.ClusterTraincrd, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clustertraincrd"), name)
	}
	return obj.(*v1.ClusterTraincrd), nil
}
